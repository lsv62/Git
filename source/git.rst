
Перше налаштування Git
----------------------

.. glossary:: 

    ``config``
        * ``--system -l`` - конфігурація для всіх користувачів c:/Program Files/Git/etc/gitconfig
        * ``--global -l`` - конфігурація для користувача [user]/.gitconfig
        * ``--local -l`` - конфігурація для репозиторія .git/config
        * ``--global user.name "..."`` - ім'я користувача
        * ``--global user.email ...`` - e-mail
        * ``user.name "..."`` - ім'я користувача для проекта
        * ``user.email ...`` - e-mail для проекта
        * ``--global alias.<shortname> '<command'`` - введення псевдоніму команді

Отримання довідки
-----------------------

.. glossary:: 

    ``help``
        ``<command>`` - онлайн довідка
    
    ``<command> -h``
        коротка довідка
        
Як працює Git
----------------

.. glossary::

    ``git workflow``
        * Створіть repository (проект) за допомогою інструменту new сайті github
        * Скопіюйте (clone) репозиторій на вашу локальну машину
        * Додайте файл до свого локального репо та commit (збережіть) зміни
        * Push ваші зміни до основної гілки віддаленого сховища
        * Внесіть зміни у свій файл за допомогою інструмента хостингу git і commit
        * Pull зміни на вашу локальну машину
        * Створіть гілку (версію), внесіть зміни, commit зміни
        * Відкрити pull request (запропонувати зміни до головної гілки)
        * Merge свою гілку з головною гілкою

Клонування репозиторію
-------------------------

.. glossary::

    ``clone``
        * https://github.com/<repo> -- копіювання існуючого github repo
        * ``<local path>`` -- копіювання з локального сховища
        * ``--single-branch`` -- rлонувати лише одну гілку, на яку вказує HEAD або ``--branch``
        * ``-b`` -- rлонувати віддалену гілку замість HEAD
        * ``-o <new server nave>`` -- змінює іь'я по замоченню origin на нове
        * ``--recurse-submodules`` -- автоматично ініціалізує та оновлює кожен підмодуль у репозиторії

Створення репозиторію з існуючого каталогу
------------------------------------------

.. glossary::

    ``init``
        * розпочинає використовувати з цим проектом Git

Відстеження нових файлів
-----------------------------

.. glossary::

    ``add``
        * <file> - розпочати відстеження нового файлу      
        * ``-i`` - інтерактивний режим  
        * `` .`` - відстежити всі файли поточної директорії

Запис змін до репозиторію
-----------------------------------

.. glossary::

    ``commit`` 
        * ``-m "commit message"`` - внести зміни та прокоментувати (для детального опису
          не закриваючі подвійні кавички ввести пусту строку і далі ввести багатостроковий
          коментар завершуючі подвійними кавичками
        * ``<file>`` - внести зміни до файлу
        * ``--amend`` - викликає текстовий редактор для заміни попереднього комміту поточним індексом 
          та перезаписує попередній коміт поточним індексом
        * ``-am "message"`` - внести зміни з попереднім додаванням в індекс

Опублікування змін
-----------------------

.. glossary::

    ``push``
        * ``<remote> <branch>`` - надсилає гілку на віддалений репозиторій
        * ``<remote> <local branch>:<remote branch>`` - надсилає локальну гілку на віддалену з 
          іншим іменем
        * ``--all,  --branches`` - надсилає всі гілки на віддалений репозиторій
        * ``<remote_name> -d, --delete <remote_branch-name>`` - видалення віддалених гілок
        * ``origin <tagname>`` - надсилає тег на віддалений репозиторій
        * ``origin --tags`` - надсилає всі тегі на віддалений репозиторій
        * ``origin --delete <tagname>`` - видаляє тег з віддаленого репозиторію
        * ``origin --delete <braanch name>`` - видалає віддалену гілку
        * ``-u origin <branch>`` - додає віддаленю гілку, що відслідковується
        * ``-u origin <branch1>:<branch2>`` - надсилає зміни з локольної гілки 1 на віддалену 
          гілку 2
        * ``-f <origin> <branch>`` - замінює гілку на сервері комітом, який не є її нащадком
        
Перенесення змін на локальний репозиторій
---------------------------------------------

.. glossary::

    ``fetch``
        ``origin`` - оновлює локальні посилання на дані віддаленого сховища

    ``pull``
        * отримує та об’єднує віддалену гілку з поточною гілкою
        * ``<url> <branch>`` - зливає зміни з віддаленої гілки без необхідності додавати 
          віддалене сховище; одночасно виконує fetch, checkout, merge

.. image:: _static/Transport-command.png

Створення нової гілки (версії)
----------------------------------

.. glossary::

    ``branch``
        * виводить список локальних гілок
        * ``<branch name>`` - створює новий ``HEAD`` на поточний комміт, але не переключилися на нього
        * ``-d <branch name>`` - видаляє гілку
        * ``-v`` - виводить останній commit з кожної гілки
        * ``--merged`` - виводить гілки вже об’єднані з поточною
        * ``--no-merged`` - виводить гілки, які містять ще не об’єднані дані
        * ``-D <branch name>`` - видаляє гілку, що містить не об'єднані дані
        * ``--all`` - виводить локальні та віддалені гілки, що відстежуються
        * ``-u <remote>/<branch name>`` - змінює прив'язку до віддаленої гілки
        * ``-vv`` - виводіть інформацію про відслідковані гілки та відставання у відстеженні
        * ``<newbranch> <oldbranch2>`` - відгалужує новуу гілку від існуючої без переключення

Перевірка стану файлів
-----------------------------

.. glossary::

    Статус файлів
        * Untracked - неконтрольований Git
        * Unmodified - після виконання commit
        * Modified - відредагований
        * Staged - індексований для наступного commit

    ``status``
        * відображає стан файлів та конфлікти злиття
        * ``-s`` - відображає скорочено cтан індексу і робочого директорія:
        * ``-b master`` - відображає cтан гілки master
        * ``--ignored`` - відображає cтан ігнорованих файлів

    ``diff``
        * показує неіндексовані зміни (між робочим деревом та індексом)
        * ``--staged`` - Зміни між індексом і останнім комітом
        * ``HEAD`` - Зміни між робочим деревом та останнім комітом   
        * ``AUTO_MERGE`` - Зміни в робочому дереві після вирішення текстових конфліктів
        * ``<branch1> <branch2>`` - Зміни між гілками
        * ``--check`` - перевірка помилок з кінцевими пробільними символами
        * ``--name-only`` - показує лише імена файлів, які відрізняються
        * ``--name-status`` - показує імена файлів, які відрізняються з індикацією статусу змін (A, M, D)
        * ``<commit> <commit>`` - показує зміни між двома комітами
        * ``<commit> <file>`` - показує зміни в файлі між комітом та робочим деревом
   
Ігнорування файлів
---------------------

.. glossary::

    .gitignore
        * # - коментрат
        * / - після імені вказує на каталог
        * ! - на початку шаблону заперечує його
        * * - відповідає нулю або більше символів
        * [abc] - відповідає будь-якому символу в дужках
        * ? - відповідає одному символу
        * `a/**/z` - відповідають вкладеним директоріям 

Видалення файлів
-------------------

.. glossary::

    ``rm`` 
        * ``<file>`` - видаляє файл з робочого дерева та індексує видалення в наступному коміті
        * ``--cached <file>`` - видаляє файл лише з індексу; робочі файли, залишаться та не контролюються
        * ``-f`` - видалення файлів вже доданих до індексу
        * ``\*`` - розкриття шаблону

Переміщення та перейменування файлів
-----------------------------------------

.. glossary::

    ``mv`` 
        * ``<file_from> <file_to>`` - перейменує файл та додає до індексу
        * ``mv <file> ... <directory>`` - переміщення файлу в діректорію

Перегляд історії комітів
--------------------------

.. glossary::

    ``log``
        * перераховує коміти у зворотному хронологічному порядку
        * ``-p, --patch`` - показати зміни, внесені кожним комітом
        * ``-<n>`` - показати n остнніх коміта
        * ``--oneline`` - показує короткий хеш комітів в одному рядку
        * ``--pretty=``
            * ``oneline`` -  друкує кожен коміт в одному рядку
            * ``format:``
                * ``%h`` - Скорочений хеш коміту
                * ``%an`` - Ім’я автора
                * ``%ae`` - Поштова адреса автора
                * ``%s`` - Тема
        * ``--graph`` -  показує історію ваших гілок та зливань
        * ``--since=2.weeks`` - список комітів за останні два тижні
        * ``--until=2.weeks`` - список комітів до останніх двох тижнів
        * ``--<path/to/file>`` - журналу комітів до файлів
        * ``<branch>..origin/<branch>`` - надає зміни у віддаленій гілці відносно локальної 
        * ``--no-merges <branch1>..<branch2>`` - відображае коміти другої гілки, яких немає в першої
        * ``<branch> --not master`` - відображае коміти, які є в branch, проте яких немає в master
        * ``<branch1>...<branch2>`` - відображае коміти гілок, яких немає в іншій
        * ``-S <line>`` -- показати коміти, що змінили входженя line 
        * ``-L '/<start/,<end>:<path>'`` - показує коміти, в яких змінено рядки,
          що починаються з start та закінчуються з end в файлі path
        * ``-p -- <file-path>`` - показує зміни вказаного файла
          
Відмова від змін
--------------------

.. glossary::

    ``reset``
        * ``<file>`` -- деіндексує файл повертаючи його з HEAD до індексу
        * ``--soft HEAD~`` -- скасовує останню команду ``git commit`` повертаючи 
          HEAD на попередній коміт без зміни індексу та робочої директорії
        * ``--soft HEAD~n`` -- скасовує n останніх комітів повертаючи 
          HEAD на n комітів без зміни індексу та робочої директорії
        * ``--mixed HEAD~`` -- скасовує останні команди ``git commit`` та 
          ``git add`` повертаючи HEAD на попередній коміт зі зміною індексу 
          та без зміни робочої директорії
        * ``--hard HEAD~`` -- скасовує останні команди ``git commit`` та 
          ``git add`` повертаючи HEAD на попередній коміт зі зміною індексу 
          та робочої директорії також скасовує небажаний коміт зливання у локальному репозиторії
        * ``<commit> <file>`` -- повертає в індекс версію файла з заданого коміту
        * ``<branch name>`` -- перемищує гілку на поточний HEAD
        * ``<commit>`` - повертає версію HEAD та індекс з заданого коміту

    ``revert``
        * ``-m 1 HEAD`` -- скасовує всі зміни з існуючого коміту
        
    ``restore``
        * заміняє файли в робочому директорії
        * ``<file>`` -- відновлює робочий файл з індексу
        * ``--staged <file>`` -- відновлює файл в індексі з HEAD
        * ``--staged --worktree <file>`` -- відновлює робочий файл та індекс з HEAD
        * ``--sourse=<tree>`` -- вказує джерело для відновлення

    ``checkout``
        * ``<branch name>`` -- перемищує HEAD на існуючу гілку зі зміною індексу та
          робочих файлів, а якщо такої гілки не існує, то створює локальну копію 
          віддаленої гілки
        * `` -- <file>`` -- скасовує зміни в робочому каталозі
        * ``<tagname>`` -- виводить версію файла, помічену тегом
        * ``-b <branch name>`` -- створює нову гілку та переходить на неї
        * ``-b <new branch> <remote>/<branch>`` -- створює локальну копію віддаленої гілки, 
          переходить та відстежує її, з можливістю зміни імені
        * ``--track <remote>/<branch>`` -- скорочена версія створення копії та вістеження віддаленої гілки
        * ``<commit>`` - повертає версію HEAD, індекс та робочу директорію з заданого коміту 

Взаємодія з віддаленими сховищами
-------------------------------------

.. glossary::

    ``remote``
        * ``-v`` - показує URL-адреси віддаленого сервера з доступом для читання та запису
        * ``add <shortname> <url>`` - додає нове віддалене сховище Git
        * ``show origin`` - показує URL-адресу віддаленого сховища та гілки відстеження
        * ``rename <old name> <new name>`` - змінює ім'я віддаленого сховища
        * ``remove <name>`` - видаляє посилання на віддалене сховище

Встановлення тегів
----------------------

.. glossary::

    ``tag``
        * виводить список тегів
        * ``-l <pattern>`` -- виводить список тегів за шаблоном
        * ``show <tag version>`` -- виводить тег разом із комітом, який було позначено тегом        
        * ``<tagname>`` -- створює легкий тег 
        * ``-a <tagname> -m "tag message"`` -- створює анотований тег        
        * ``-a <tagname> <commit checksum>`` -- створює тег до існуючого коміту
        * ``-d <tagname>`` -- видаляє тег з локального репозиторію

Зливання гілок
--------------------

.. glossary::

    ``merge``
        * ``<branch name>`` -- зливає вказану гілку з поточною
        * ``<remote>/<remote branch>`` -- зливаэ віддалену гілку з поточною
        * ``--abort`` -- повертає до стану на початку зливання
        * ``-Xours`` -- обирає поточну гілку при наявності конфліктів злиття
        * ``-Xtheirs <branch>`` -- обирає зовнішню гілку при наявності конфліктів злиття
        * ``-s ours <branch>`` -- уявне злиття без застосування зовнішньої гілки

Перебазовування
-------------------

.. glossary::

    ``rebase``
        * ``<branch>`` - перебазує поточну гілку на вказану, роблячі лінійну історію комітів
        * ``--onto <branch1> <branch2> <branch3>`` - перебазує коміти гілки 3, які відгалужені
          від гілки 2, на гулку 1
        * ``<branch1> <branch2>`` - перебазує гілку 2 на гілку 1

Сервер Git
--------------

.. glossary::

    Локальний протокол
        * ``clone <path>`` - клонування локального сховища
        * ``remote add <repo> <path>`` - додавання локльного сховища

    SSH ключ
        * ''ssh-keygen -t rsa -b 4096 -C "lsv@kotris.ua"'' - команда генерації
          ключа
        * ``user/.ssh`` - місце знаходження ключа
        * ``id_name, id_name.pub`` - приватний та публічний ключ
        * ``ssh-keygen`` - команда генерації ключів

    Посилання 
        * ``<number>`` - посилання на Pull Request чи на isuure
        * ``<user name#number>`` - посилання на користувача
        * ``<user name/repo#number>`` - посилання на інше сховище

Запит на злиття змін
-------------------------------------------

.. glossary::

    ``request-pull``
        * ``origin/master <repo>`` - запит супроводжувачу проекта на злиття змін

Посилання змін електронною поштою
---------------------------------

.. glossary::

    ``format-patch``
        * ``-M origin/master`` - генерує перелік переіменованих файлів у форматі mbox для відправки 
          електронною поштою 
          
    ``send-email``
        * ``<pattern>`` - надсилає латки на електронну адресу, вказану в ~/.gitconfig

    ``apply``
        * ``<patch path>`` - змінює файли у вашій робочій директорії на латку з електронної пошти
        * ``--check <patch>`` - перевіряє, чи латка застосована чисто

Стек незавершених змін
----------------------

.. glossary::

    ``stash``
        * зберігає зміни в стеку
        * ``list`` - відображає збереженні зміни
        * ``apply`` - використання щойно збережених змін
            * ``stash@{2}`` - використання одного з попередніх змін
            * ``--index`` - використання змін з одночасним індексуванням
        * ``drop`` - видалення змін зі стеку
        * ``pop`` - використання ховання з одночасним видаленням зі стеку
        * ``--keep-index`` - збереження змін з одночасним індексуванням
        * ``-u`` - зберігти такаж зміни несупроводжуваних файлів
        * ``--patch`` - інтерактивний вибір збереження
        * ``branch <branch name>`` - створює нову гілку із назвою коміту, з якого ви зробили збереження
          та видаляє збереження
        * ``--all`` - видаляє всі зміни, проте зберігвє їх в стеку

Очищення робочої директорії
---------------------------

.. glossary::

    ``clean``
        * позбуває змін в робочої директорії та видаляє файли, які не супроводжується, але відсутні в 
          .gitignore
        * ``-f -d`` - лише видаляє файли, які не супроводжується
        * ``-d -n`` - нічого не видаляє та показує що можна видалити
        * ``-d -x`` - видаляє також файли, що вказані в .gitignore
        * ``-x -i`` - інтерактивке видалення

Пошук
-----

.. glossary::

    ``grep``
        * шукає в будь-якому дереві коміту або робочій теці заданий рядок
        * ``-n`` -- вивести номери рядків, в яких є збіги
        * ``-c`` -- показує в яких файлах знайдено рядок та скільки таких рядків
        * ``-p`` -- показує контекст навколо шукомого рядка
        * ``--and`` -- шукає декілька збігів, що мають бути в одному рядку

Визначення дати та автора змін
------------------------------

.. glossary::

    ``blame``
        ``-L <start>,<end> <path>`` -- показує, який коміт востаннє редагував кожен рядок будь-якого файла

Додавання проекту до іншого
----------------------------

.. glossary::

    ``submodule``
        * ``add <url>`` -- додає існуючий репозиторій Git як підмодуль в директорію з назвою репозиторію
        * ``init`` -- ініціалізація підмодуля в основному репозиторії
        * ``update`` -- отримує дані з проекту підподуля
        * ``update --remote <repo>`` - перейде до підмодуля та отримає й оновить зміни
